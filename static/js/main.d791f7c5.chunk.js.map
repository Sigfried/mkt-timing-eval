{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js","Portfolio.js","data/daily.csv","data/dcadaily.csv"],"names":["ChartCss","textAlign","color","marginLeft","marginTop","Chart","props","_this","Object","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","drewChart","gRef","React","createRef","_this$props","sym","data","setup","prevProps","prevState","_this$props2","current","g","d3","chartSetup","setState","_this$props3","type","title","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","id","concat","ref","style","_this$props4","width","height","xScale","yScale","doToChart","xAxis","append","attr","e","console","log","yAxis","ticks","drawLegend","Component","legend","legendVals2","includes","split","legend4","selectAll","enter","d","i","length","text","App","react_default","className","Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","demo_src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","dtfmt","cfmt","SYMBOL_FILTER","bysym","global","status","datasets","dataReadyEvt","CustomEvent","Promise","all","daily","dcadaily","_ref","_ref2","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__","dispatchEvent","accessors","x","y0","y1","date","curcost","curval","price","curpl","close","realpl","symbol","tradesAndDailyPricesCsvPrep","map","Date","Price","parseFloat","Quantity","pos","trdnum","parseInt","_","supergroup","sort","mungeRecsInGroups","calcAndPopulatePL","flatMap","records","sg","mungeFunc","forEach","justTrades","filter","Action","plcalc","closingPL","trades","reduce","acc","cur","idx","src","push","closepos","stack","sell","sharesToClose","pl","Error","buy","pop","remainder","cloneDeep","dataColConf","innerWidth","Container","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","_this2","addEventListener","evt","handleData","get","react__WEBPACK_IMPORTED_MODULE_8___default","_Component2","_this3","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","chartGroupCols","mapValues","dailyData","dsname","cgcData","dcc","_tradesAndDailyPrices","conf","cgcName","chartGroupColData","lasttrades","s","last","sortBy","cols","Symbol","trd","P&L","Math","floor","Gains","Value","Cost","Close","colnames","keys","tbl","gridColumn","hoverVals","v","k","hoverMsg","display","gridTemplateColumns","isFinite","chartGroups","ChartGroup","_this$state$chartGrou","values","_this4","leaveChart","bind","c_Users_sigfried_Documents_work_school_INST762_portfolio_trading_review_viz_demo_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","hoverChart","_this$state","selectedDate","setSelectedDate","_this$state2","makeSvg","cgCharts","domain","invert","clientX","selectedTrade","find","toLocaleDateString","cgHeight","cHeight","margin","chart","ckey","fixedProps","range","Comp","makeYScale","simpleLine","y","plLine","description","blueLine","redLine","_ref3","transform","x1","x2","y2","_this$props5","makeCgCharts","top","right","bottom","left","assign","charts","cx","cy","stroke","strokeWidth","fillOpacity","fill","r","svg","onMouseLeave","onMouseMove","tradeLines","_this$state3","_this$state3$svg","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d791f7c5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"supergroup\";\n\nconst ChartCss = {\n  textAlign: \"left\",\n  color: \"darkgreen\",\n  marginLeft: 20,\n  marginTop: 100\n};\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { drewChart: false };\n    this.gRef = React.createRef();\n  }\n  componentDidMount() {\n    let { sym, data } = this.props;\n    this.setup({}, {});\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.setup(prevProps, prevState);\n  }\n  setup(prevProps, prevState) {\n    let { sym, data } = this.props;\n    let { drewChart } = this.state;\n    if (data && this.gRef.current) {\n      if (!drewChart || data !== prevProps.data) {\n        let g = d3.select(this.gRef.current);\n        let drawChart = this.chartSetup(g) || (() => {});\n        drawChart(data);\n        this.setState({ drewChart: true });\n      }\n    }\n  }\n  render() {\n    let { sym, data, type, title } = this.props;\n    return <g id={`${sym}-${type}`} ref={this.gRef} style={ChartCss} />;\n  }\n  chartSetup(g) {\n    let {\n      sym,\n      data,\n      type,\n      width,\n      height,\n      xScale,\n      yScale,\n      title,\n      doToChart\n    } = this.props;\n    try {\n      var xAxis = d3.axisBottom(xScale);\n      g.append(\"g\")\n        .attr(\"class\", \"x axis x-axis\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis);\n    } catch (e) {\n      console.log(e);\n      debugger;\n    }\n\n    // add the Y Axis\n    var yAxis = d3.axisRight(yScale).ticks(3);\n    //.tickFormat(d3.formatPrefix(\"1.0\", 1e3));\n    g.append(\"g\")\n      .attr(\"class\", \"y axis y-axis\")\n      .attr(\"transform\", `translate(0,0)`)\n      .call(yAxis);\n\n    drawLegend(g, width, height, title);\n\n    var chart = g; //.append(\"g\");\n    doToChart(chart, data, xScale, yScale);\n    return;\n    // define the area\n\n    // from Chart\n    /*\n    g.attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      */\n    return function drawChart(data) {\n      // format the data\n\n      const area = () => {}; // moved to BarChart doToChart props\n\n      // add the X Axis\n      var green = false;\n      var red = false;\n      var greenData = [];\n      var redData = [];\n      var allRed = [];\n      var allGreen = [];\n      data.forEach(function(d, idx, data) {\n        // console.log(\"here\", d, conf)\n\n        if (d.blueValue >= d.redValue) {\n          if (red) {\n            redData.push(d);\n            allRed.push(redData);\n            redData = [];\n            red = false;\n          }\n          green = true;\n          greenData.push(d);\n        } else {\n          if (green) {\n            greenData.push(d);\n            allGreen.push(greenData);\n            greenData = [];\n            green = false;\n          }\n          red = true;\n          redData.push(d);\n        }\n        if (Object.is(data.length - 1, idx)) {\n          if (green) {\n            greenData.push(d);\n            allGreen.push(greenData);\n          } else {\n            redData.push(d);\n            allRed.push(redData);\n          }\n        }\n      });\n\n      // add the area\n      var chart = g.append(\"g\");\n      allGreen.forEach(greenD => {\n        chart\n          .append(\"path\")\n          .data([greenD])\n          .attr(\"class\", \"greenArea\")\n          //.style(\"opacity\", .2)\n\n          .attr(\"d\", area);\n      });\n      allRed.forEach(redA => {\n        chart\n          .append(\"path\")\n          .data([redA])\n          .attr(\"class\", \"redArea\")\n          .attr(\"d\", area);\n      });\n      // add the blueLine path.\n\n      // THIS IS THE ZOOM CODE\n      // var zoom = d3\n      //   .zoom()\n      //   .scaleExtent([1, 10])\n      //   .on(\"zoom\", () => {\n      //     var scaleX = d3.event.transform.rescaleX(x);\n      //     var scaleY = d3.event.transform.rescaleY(y);\n      //     g.selectAll(\".red, .redArea, .greenArea, .blue\").attr(\n      //       \"transform\",\n      //       d3.event.transform\n      //     );\n      //     g.select(\".x.axis\").call(xAxis.scale(scaleX));\n      //     g.select(\".y.axis\").call(yAxis.scale(scaleY));\n\n      //     // g.attr(\"transform\", d3.event.transform)\n      //   });\n      // chart.call(zoom);\n      // chart\n      //   .append(\"defs\")\n      //   .append(\"clipPath\")\n      //   .attr(\"id\", \"clip\")\n      //   .append(\"rect\")\n      //   .attr(\"width\", width)\n      //   .attr(\"height\", height);\n      // chart.attr(\"clip-path\", \"url(#clip)\");\n    };\n  }\n}\nconst drawLegend = (g, width, height, title) => {\n  var legend = g\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height - 50);\n\n  var dataL = 0;\n  var offset = 150;\n  var legendVals2 = [\"Current Cost\", \"Sunk Cost\"];\n  var color = [d3.rgb(\"#ff00ea\"), d3.rgb(\"#5201a8\")];\n  // from SimpleChart\n  var legendVals2 = title.includes(\"+\") ? title.split(\"+\") : [title];\n  // var color = [d3.rgb(\"steelblue\")];\n\n  var legend4 = legend\n    .selectAll(\".legends4\")\n    .data(legendVals2)\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", \"legends4\")\n    .attr(\"transform\", function(d, i) {\n      if (i === 0) {\n        dataL = d.length + offset;\n        return \"translate(30,2)\";\n      } else {\n        var newdataL = dataL;\n        dataL += d.length + offset;\n        return `translate(${d.length + i * offset}, 2)`;\n      }\n    });\n\n  legend4\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 10)\n    .attr(\"height\", 10)\n    .style(\"fill\", function(d, i) {\n      return color[i];\n    });\n\n  legend4\n    .append(\"text\")\n    .attr(\"x\", 20)\n    .attr(\"y\", 10)\n    //.attr(\"dy\", \".35em\")\n    .text(function(d, i) {\n      return d;\n    })\n    .attr(\"class\", \"textselected\")\n    .style(\"text-anchor\", \"start\")\n    .style(\"font-size\", 15);\n};\n/*\nconst BarChartCss = {\n  textAlign: \"left\",\n  color: \"darkgreen\",\n  marginLeft: 20\n};\n\nclass BarChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { drewChart: false };\n    this.gRef = React.createRef();\n  }\n  componentDidMount() {\n    let { sym, data } = this.props;\n    this.setup({}, {});\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.setup(prevProps, prevState);\n  }\n  setup(prevProps, prevState) {\n    let { sym, data } = this.props;\n    let { drewChart } = this.state;\n    if (data && this.gRef.current) {\n      if (!drewChart || data !== prevProps.data) {\n        let g = d3.select(this.gRef.current);\n        let drawChart = this.chartSetup(g);\n        drawChart(data);\n        this.setState({ drewChart: true });\n      }\n    }\n  }\n  render() {\n    let { sym, data } = this.props;\n    return <g id={`g-${sym}`} ref={this.gRef} style={BarChartCss} />;\n  }\n  chartSetup(g) {\n    let { sym, data, type, width, height, xScale, yScale } = this.props;\n    // set the dimensions and margins of the graph\n    // const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n\n    // set the dimensions and margins of the graph\n    // width = width - margin.left - margin.right;\n    // height = height - margin.top - margin.bottom;\n\n    // set the ranges\n    //let x = d3.scaleTime().range([0, width])\n    //let y = d3.scaleLinear().range([height, 0])\n\n    // define the area\n    var area = d3\n      .area()\n      .x(function(d) {\n        // console.log(d)\n        return xScale(d.date);\n      })\n      .y0(function(d) {\n        return yScale(d.redValue);\n      })\n      .y1(function(d) {\n        return yScale(d.blueValue);\n      });\n\n    // define the blue line\n    var blueLine = d3\n      .line()\n      .x(function(d) {\n        return xScale(d.date);\n      })\n      .y(function(d) {\n        return yScale(d.blueValue);\n      });\n\n    // define the blue line\n    var redLine = d3\n      .line()\n      .x(function(d) {\n        return xScale(d.date);\n      })\n      .y(function(d) {\n        return yScale(d.redValue);\n      });\n\n    return function drawChart(data) {\n      // format the data\n\n      data.forEach(function(d) {\n        //d.date = parseTime(d.year)\n        //d.blueValue = +d.blueValue\n        //d.redValue = +d.redValue\n        d.date = new Date(d.date);\n        d.blueValue = d.curval;\n        d.redValue = -d.curcost;\n      });\n      // scale the range of the data\n      /*\n      xScale.domain(\n        d3.extent(data, function(d) {\n          return d.date;\n        })\n      );\n      yScale.domain([\n        0,\n        d3.max(data, function(d) {\n          return d.blueValue;\n        })\n      ]);\n      * /\n      // add the X Axis\n      var xAxis = d3.axisBottom(xScale);\n      g.append(\"g\")\n        .attr(\"class\", \"x axis x-axis\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .call(xAxis);\n\n      // add the Y Axis\n      var yAxis = d3\n        .axisRight(yScale)\n        .ticks(3)\n        .tickFormat(d3.formatPrefix(\"1.0\", 1e3));\n      g.append(\"g\")\n        .attr(\"class\", \"y axis y-axis\")\n        .attr(\"transform\", `translate(0,0)`)\n        .call(yAxis);\n\n      var legend = g\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height - 50);\n\n      var dataL = 0;\n      var offset = 150;\n      var legendVals2 = [\"Current Cost\", \"Sunk Cost\"];\n      var color = [d3.rgb(\"steelblue\"), d3.rgb(\"black\")];\n      var legend4 = legend\n        .selectAll(\".legends4\")\n        .data(legendVals2)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"legends4\")\n        .attr(\"transform\", function(d, i) {\n          if (i === 0) {\n            dataL = d.length + offset;\n            return \"translate(30,2)\";\n          } else {\n            var newdataL = dataL;\n            dataL += d.length + offset;\n            return `translate(${d.length + i * offset}, 2)`;\n          }\n        });\n\n      legend4\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .attr(\"width\", 10)\n        .attr(\"height\", 10)\n        .style(\"fill\", function(d, i) {\n          return color[i];\n        });\n\n      legend4\n        .append(\"text\")\n        .attr(\"x\", 20)\n        .attr(\"y\", 10)\n        //.attr(\"dy\", \".35em\")\n        .text(function(d, i) {\n          return d;\n        })\n        .attr(\"class\", \"textselected\")\n        .style(\"text-anchor\", \"start\")\n        .style(\"font-size\", 15);\n\n      var green = false;\n      var red = false;\n      var greenData = [];\n      var redData = [];\n      var allRed = [];\n      var allGreen = [];\n      data.forEach(function(d, idx, data) {\n        // console.log(\"here\", d, conf)\n\n        if (d.blueValue >= d.redValue) {\n          if (red) {\n            redData.push(d);\n            allRed.push(redData);\n            redData = [];\n            red = false;\n          }\n          green = true;\n          greenData.push(d);\n        } else {\n          if (green) {\n            greenData.push(d);\n            allGreen.push(greenData);\n            greenData = [];\n            green = false;\n          }\n          red = true;\n          redData.push(d);\n        }\n        if (Object.is(data.length - 1, idx)) {\n          if (green) {\n            greenData.push(d);\n            allGreen.push(greenData);\n          } else {\n            redData.push(d);\n            allRed.push(redData);\n          }\n        }\n      });\n\n      // add the area\n      var chart = g.append(\"g\");\n      allGreen.forEach(greenD => {\n        chart\n          .append(\"path\")\n          .data([greenD])\n          .attr(\"class\", \"greenArea\")\n          //.style(\"opacity\", .2)\n\n          .attr(\"d\", area);\n      });\n      allRed.forEach(redA => {\n        chart\n          .append(\"path\")\n          .data([redA])\n          .attr(\"class\", \"redArea\")\n          .attr(\"d\", area);\n      });\n      // add the blueLine path.\n      chart\n        .append(\"path\")\n        .data([data])\n        .attr(\"class\", \"blue\")\n        .attr(\"d\", blueLine);\n\n      chart\n        .append(\"path\")\n        .data([data])\n        .attr(\"class\", \"red\")\n        .attr(\"d\", redLine);\n\n      // THIS IS THE ZOOM CODE\n      // var zoom = d3\n      //   .zoom()\n      //   .scaleExtent([1, 10])\n      //   .on(\"zoom\", () => {\n      //     var scaleX = d3.event.transform.rescaleX(x);\n      //     var scaleY = d3.event.transform.rescaleY(y);\n      //     g.selectAll(\".red, .redArea, .greenArea, .blue\").attr(\n      //       \"transform\",\n      //       d3.event.transform\n      //     );\n      //     g.select(\".x.axis\").call(xAxis.scale(scaleX));\n      //     g.select(\".y.axis\").call(yAxis.scale(scaleY));\n\n      //     // g.attr(\"transform\", d3.event.transform)\n      //   });\n      // chart.call(zoom);\n      // chart\n      //   .append(\"defs\")\n      //   .append(\"clipPath\")\n      //   .attr(\"id\", \"clip\")\n      //   .append(\"rect\")\n      //   .attr(\"width\", width)\n      //   .attr(\"height\", height);\n      // chart.attr(\"clip-path\", \"url(#clip)\");\n    };\n  }\n}\n*/\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport Portfolio from \"./Portfolio\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Portfolio />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport daily from \"./data/daily.csv\";\nimport dcadaily from \"./data/dcadaily.csv\";\nimport _ from \"supergroup\";\nimport Chart from \"./Chart\";\nwindow.d3 = d3;\n\nconst dtfmt = d3.timeFormat(\"%m/%d/%Y\");\nconst cfmt = d3.format(\",\");\nconst SYMBOL_FILTER = bysym => {\n  return bysym;\n  // return bysym.slice(0, 1); // debugging filter, just keep first 2\n  // some symbols with sells from zero positions -- doing this in R code now\n  // let bad = ['HACK', 'IUSG', 'IVE']\n  // return bysym.filter(sym => !bad.includes(sym.toString()))\n};\n\nwindow.global = {\n  status: null,\n  datasets: {}\n};\nvar dataReadyEvt = new CustomEvent(\"dataReady\", global);\n//const datasets = { daily, dcadaily }\nPromise.all([d3.csv(daily), d3.csv(dcadaily)]).then(([daily, dcadaily]) => {\n  global.status = \"ready\";\n  global.datasets = { daily, dcadaily }; // make sure === returns false for previous global.datasets\n  document.dispatchEvent(dataReadyEvt);\n});\n\nconst accessors = {\n  x: d => d[\"date\"],\n  y0: d => d[\"curcost\"],\n  y1: d => d[\"curval\"],\n  date: d => d[\"date\"],\n  curcost: d => d[\"curcost\"],\n  curval: d => d[\"curval\"],\n  price: d => d[\"price\"],\n  curpl: d => d[\"curpl\"],\n  close: d => d[\"close\"],\n  realpl: d => d[\"realpl\"],\n  symbol: d => d[\"symbol\"]\n};\nconst tradesAndDailyPricesCsvPrep = daily => {\n  daily = daily.map(d => {\n    d.date = new Date(d.date);\n    d.Price = parseFloat(d.Price);\n    d.price = d.Price;\n    d.Quantity = parseFloat(d.Quantity);\n    d.close = parseFloat(d.close);\n    d.curcost = parseFloat(d.curcost);\n    d.curval = parseFloat(d.curval);\n    d.curpl = parseFloat(d.curpl);\n    d.pos = parseFloat(d.pos);\n    d.trdnum = parseInt(d.trdnum);\n    return d;\n  });\n  let bysym = _.supergroup(daily, \"symbol\").sort();\n\n  if (SYMBOL_FILTER) {\n    bysym = SYMBOL_FILTER(bysym);\n  }\n  /* moved to R code\n  bysym = mungeRecsAndRegroup(\n    bysym, \n    sym => {  // tnoss daily price recs more than 5 days before first trade\n      let idx = sym.records.findIndex(d => d.pos !== 0)\n      idx = Math.max(0, idx - 5)\n      return sym.records.slice(idx)\n    },\n    [\"symbol\"])\n  debugger\n  */\n  mungeRecsInGroups(bysym, calcAndPopulatePL);\n  daily = bysym.flatMap(d => d.records);\n  //debugger\n  return { daily, bysym, accessors };\n};\n\nconst mungeRecsAndRegroup = (sg, mungeFunc, sgParams) => {\n  // might be worth adding to supergroup module\n  return _.supergroup(sg.flatMap(mungeFunc), ...sgParams);\n};\nconst mungeRecsInGroups = (sg, mungeFunc) => {\n  // also might be worth adding to supergroup module, but better version that\n  // doesn't mutate its input\n  sg.forEach(g => {\n    g.records = mungeFunc(g);\n  });\n  return sg;\n};\nconst calcAndPopulatePL = sym => {\n  let justTrades = sym.records.filter(d => d.Action !== \"NA\");\n  //if (sym+'' === 'SLVP') debugger\n  plcalc(justTrades); // adds closingPL to sell trades\n  let realpl = 0;\n  // sym.records.filter(d=>d.Action !== 'NA')\n  //    .map(d => {return _.pick(d, ['Action','Price','Quantity','curcost','curpl','curval','realpl'])})\n  //    .map(d=>_.values(d).map(d=>isFinite(d) ? Math.round(d) : d))\n  let wrealpl = sym.records.map(d => {\n    //if (d.Action === 'sell') debugger\n    if (typeof d.closingPL !== \"undefined\") {\n      // should also be a sell trade, but not bothering to check\n      realpl += d.closingPL;\n      //debugger\n    }\n    d.realpl = realpl;\n    return d;\n  });\n  return wrealpl;\n};\nconst plcalc = trades => {\n  // adds closingPL to sell trades\n  let remainingBuyStack = trades.reduce((acc, cur, idx, src) => {\n    if (cur.Action === \"buy\") {\n      acc.push(cur);\n    } else {\n      cur.closingPL = closepos(acc, cur);\n    }\n    return acc;\n  }, []);\n  // don't need to return remainingBuyStack, results stored in sell trades\n};\nconst closepos = (stack, sell) => {\n  let sharesToClose = -sell.Quantity;\n  let pl = 0;\n\n  while (sharesToClose) {\n    if (sharesToClose < 0) throw new Error(\"that's not supposed to happen\");\n    let buy = stack.pop();\n    if (buy.Quantity > sharesToClose) {\n      let remainder = _.cloneDeep(buy);\n      remainder.Quantity -= sharesToClose;\n      stack.push(remainder);\n      buy.Quantity = sharesToClose;\n    }\n    pl += buy.Quantity * sell.Price - buy.Quantity * buy.Price;\n    sharesToClose -= buy.Quantity;\n  }\n  return pl;\n};\n\nconst pageConf = () => ({\n  width: window.innerWidth * 0.9\n});\nconst dataColConf = () => {\n  let pc = pageConf();\n  let conf = {\n    width: pc.width * 0.45\n  };\n  return conf;\n};\n\nconst chartGroupColData = (dailyData, dsname) => {\n  let dcc = dataColConf();\n  let { daily, bysym, accessors } = tradesAndDailyPricesCsvPrep(dailyData);\n  let conf = {\n    cgcName: dsname,\n    width: dcc.width,\n    daily,\n    bysym,\n    accessors\n  };\n  window.global[dsname] = { conf };\n  return conf;\n};\nconst chartGroupConf = () => ({\n  height: 500\n});\nexport default class Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount() {\n    document.addEventListener(\"dataReady\", evt => this.setState({ global }));\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.handleData(prevProps, prevState);\n  }\n  handleData(prevProps, prevState) {\n    let status = _.get(this.state, \"global.status\");\n    let datasets = _.get(this.state, \"global.datasets\");\n    if (status !== \"ready\") {\n      return;\n    }\n    if (datasets === _.get(prevState, \"global.datasets\")) {\n      return;\n    }\n    this.setState({ status, datasets });\n  }\n  render() {\n    if (this.state.status !== \"ready\") return null;\n    return <Portfolio datasets={this.state.datasets} />;\n  }\n}\nexport class Portfolio extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount() {\n    this.handleData({}, {});\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.handleData(prevProps, prevState);\n  }\n  handleData(prevProps, prevState) {\n    let { datasets } = this.props;\n    if (datasets === prevProps.datasets) {\n      return;\n    }\n    // two datasets right now (regular portfolio and dollar cost avg)\n    //    make two chartGroupCols\n    //    each chartGroupCol has a chartGroup for each symbol\n    let chartGroupCols = _.mapValues(datasets, (dailyData, dsname) => {\n      let cgcData = chartGroupColData(dailyData, dsname);\n      let { cgcName, daily, bysym, accessors, width } = cgcData;\n\n      let lasttrades = bysym.map(s => _.last(s.records));\n      lasttrades = _.sortBy(lasttrades, d => d.realpl);\n      //lasttrades = _.sortBy(lasttrades, d => d.curpl);\n      //let cols = ['Symbol', 'P&L', 'Gains', 'Value', 'Cost', 'Close']\n      let cols = {\n        Symbol: trd => accessors.symbol(trd),\n        \"P&L\": trd => Math.floor(accessors.curpl(trd)),\n        Gains: trd => Math.floor(accessors.realpl(trd)),\n        Value: trd => Math.floor(accessors.curval(trd)),\n        Cost: trd => Math.floor(accessors.curcost(trd)),\n        Close: trd => Math.floor(accessors.close(trd))\n      };\n      let colnames = _.keys(cols);\n      let hoverMsg = trd => _.map(cols, (v, k) => v(trd));\n      /*\n      (`${dtfmt(accessors.date(d))}\n        P&L: ${Math.floor(accessors.curpl(d))} Gains: ${Math.floor(\n          accessors.realpl(d)\n        )} Value: ${Math.floor(accessors.curval(d))} Cost: ${Math.floor(\n          accessors.curcost(d)\n        )}  Close: ${Math.floor(accessors.close(d))}`);\n      */\n      let tbl = (\n        <div className=\"hovtbl\">\n          <div\n            className=\"hovwrapper\"\n            //style={{ display: \"grid\", gridTemplateColumns: `repeat(${colnames.length}, 1fr)` }}\n          >\n            {colnames.map((d, idx) => (\n              <div key={idx} style={{ gridColumn: idx + 1 }}>\n                {d}\n              </div>\n            ))}\n          </div>\n          {lasttrades.map((trd, idx) => {\n            let hoverVals = hoverMsg(trd);\n            return (\n              // 1 row per (last) trade\n              <div\n                key={idx}\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${colnames.length}, 1fr)`\n                }}\n              >\n                {hoverVals.map((d, idx) => (\n                  <div key={idx} style={{ gridColumn: idx + 1 }}>\n                    {isFinite(d) ? cfmt(d) : d}\n                  </div>\n                ))}\n              </div>\n            );\n          })}\n        </div>\n      );\n\n      let chartGroups = bysym.map(sym => {\n        let key = `${cgcName}-${sym}`;\n        return (\n          <div key={key}>\n            <h4>{sym + \"\"}</h4>\n            <ChartGroup sym={sym} cgcData={cgcData} />\n          </div>\n        );\n      });\n      return (\n        <div key={cgcName} className={`chart-group-col ${cgcName}`}>\n          <h2>\n            {bysym.length} symbols, {cgcName}\n          </h2>\n          {tbl}\n          {chartGroups}\n        </div>\n      );\n      //return chartGroups;\n    });\n    this.setState({ chartGroupCols });\n  }\n  render() {\n    let { chartGroupCols = {} } = this.state;\n    //let cols = _.values(chartGroupCols);\n    return <div>{_.values(chartGroupCols)}</div>;\n  }\n}\nconst PortfolioCss = {\n  textAlign: \"left\",\n  color: \"darkgreen\"\n};\nclass ChartGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { drewChart: false, hoverMsg: \"\" };\n    //this.enterChart = this.enterChart.bind(this);\n    this.leaveChart = this.leaveChart.bind(this);\n    this.hoverChart = this.hoverChart.bind(this);\n  }\n  componentDidMount() {\n    this.handleData({}, {});\n  }\n  componentDidUpdate(prevProps, prevState) {\n    let { drewChart, selectedDate } = this.state;\n    if (selectedDate && selectedDate !== prevState.selectedDate) {\n      let { sym, cgcData } = this.props;\n      let { cgcName, daily, bysym, accessors, width } = cgcData;\n      this.setSelectedDate(selectedDate);\n      return;\n    }\n    this.handleData(prevProps, prevState);\n  }\n  handleData(prevProps, prevState) {\n    let { sym } = this.props;\n    let { drewChart, selectedDate } = this.state;\n    if (!drewChart) {\n      this.makeSvg();\n      this.setState({ drewChart: true });\n      return;\n    }\n    if (sym !== prevProps.sym) {\n      this.makeSvg();\n      return;\n    }\n  }\n  /*\n  enterChart(evt) {\n    this.setState({ hoverMsg: \"in chart\" });\n  }\n  */\n  leaveChart(evt) {\n    let { xScale } = this.state.cgCharts;\n    let selectedDate = xScale.domain()[1];\n    this.setSelectedDate(selectedDate);\n  }\n  hoverChart(evt) {\n    let { xScale } = this.state.cgCharts;\n    let selectedDate = xScale.invert(evt.clientX);\n    this.setSelectedDate(selectedDate);\n  }\n  setSelectedDate(selectedDate) {\n    let { sym, cgcData } = this.props;\n    let { accessors } = cgcData;\n    let data = sym.records;\n    let selectedTrade = data.find(\n      d =>\n        accessors.date(d).toLocaleDateString() ===\n        selectedDate.toLocaleDateString()\n    );\n    if (selectedTrade) {\n      let { cgCharts } = this.state;\n      let { xScale, cgHeight, cHeight, margin, height } = cgCharts;\n      cgCharts.forEach(chart => {\n        let { yScale, ckey } = chart;\n        d3.select(`circle#trade-dot-${ckey}`)\n          .attr(\"cx\", xScale(selectedDate))\n          // which accessor to use for y dimension???? depends on line...put something\n          // in cgChart def, but not sure what....\n          .attr(\"cy\", yScale(accessors[chart.fixedProps.type](selectedTrade)));\n      });\n      this.setState({\n        hoverMsg: `${dtfmt(accessors.date(selectedTrade))}\n          P&L: $${Math.floor(\n            accessors.curpl(selectedTrade)\n          )} Gains: $${Math.floor(\n          accessors.realpl(selectedTrade)\n        )} Value: $${Math.floor(\n          accessors.curval(selectedTrade)\n        )} Cost: $${Math.floor(\n          accessors.curcost(selectedTrade)\n        )}  Close: $${Math.floor(accessors.close(selectedTrade))}`\n      });\n    }\n  }\n  makeCgCharts() {\n    let { sym, cgcData } = this.props;\n    let { cgcName, daily, accessors, width } = cgcData;\n    let xScale = d3\n      .scaleTime()\n      .range([0, width])\n      .domain(d3.extent(sym.records.map(accessors.x)));\n    let cgCharts = [\n      {\n        Comp: Chart,\n        fixedProps: {\n          xScale,\n          title: \"Current value - current cost (unrealized P&L)\",\n          type: \"curpl\", // type should also be the name of the accessor?\n          makeYScale: (height, data, accessors) =>\n            d3\n              .scaleLinear()\n              .range([height, 0])\n              .domain(d3.extent(data.map(accessors.curpl))),\n          doToChart: (chart, data, xScale, yScale) => {\n            var simpleLine = d3\n              .line()\n              .x(function(d) {\n                //return xScale(accessors.x(d))\n                return xScale(accessors.date(d));\n              })\n              .y(function(d) {\n                //return yScale(accessors.y(d))\n                return yScale(accessors.curpl(d));\n              });\n            chart\n              .append(\"path\")\n              .data([data])\n              .attr(\"class\", \"blue\")\n              .attr(\"d\", simpleLine);\n          }\n          /*\n          tradeDot: (chart, data, xScale, yScale) => {\n            debugger\n          }\n          */\n        }\n      },\n      {\n        Comp: Chart,\n        fixedProps: {\n          xScale,\n          title: \"Realized P&L\",\n          type: \"realpl\",\n          makeYScale: (height, data, accessors) =>\n            d3\n              .scaleLinear()\n              .range([height, 0])\n              .domain(d3.extent(data.map(accessors.realpl))),\n          doToChart: (chart, data, xScale, yScale) => {\n            var plLine = d3\n              .line()\n              .x(function(d) {\n                return xScale(accessors.date(d));\n              })\n              .y(function(d) {\n                return yScale(accessors.realpl(d));\n              });\n            chart\n              .append(\"path\")\n              .data([data])\n              .attr(\"stroke\", \"purple\")\n              .attr(\"stroke-width\", 3)\n              //.attr(\"class\", \"zero\") // fix this to some appropriate color\n              .attr(\"d\", plLine);\n          }\n        }\n      },\n      {\n        Comp: Chart,\n        fixedProps: {\n          xScale,\n          title: \"Current cost + Current value\",\n          type: \"curval\",\n          description: `\n            current value = current position * current price;\n            current cost = cost of shares bought - cost of shares sold\n          `,\n          makeYScale: (height, data) =>\n            d3\n              .scaleLinear()\n              .range([height, 0])\n              .domain(\n                d3.extent(data.map(accessors.y0).concat(data.map(accessors.y1)))\n              ),\n          doToChart: (chart, data, xScale, yScale) => {\n            var area = d3\n              .area()\n              .x(function(d) {\n                return xScale(accessors.date(d));\n              })\n              .y0(function(d) {\n                return yScale(-accessors.curcost(d));\n              })\n              .y1(function(d) {\n                return yScale(accessors.curval(d));\n              });\n            var blueLine = d3\n              .line()\n              .x(function(d) {\n                return xScale(accessors.date(d));\n              })\n              .y(function(d) {\n                return yScale(accessors.curval(d));\n              });\n\n            // define the blue line\n            var redLine = d3\n              .line()\n              .x(function(d) {\n                return xScale(accessors.date(d));\n              })\n              .y(function(d) {\n                return yScale(-accessors.curcost(d));\n              });\n            chart\n              .append(\"path\")\n              .data([data])\n              .attr(\"class\", \"blue\")\n              .attr(\"d\", blueLine);\n            chart\n              .append(\"path\")\n              .data([data])\n              .attr(\"class\", \"red\")\n              .attr(\"d\", redLine);\n            let showArea = false;\n            if (showArea) {\n              var green = false;\n              var red = false;\n              var greenData = [];\n              var redData = [];\n              var allRed = [];\n              var allGreen = [];\n              data.forEach(function(d, idx, data) {\n                // console.log(\"here\", d, conf)\n\n                if (accessors.curval(d) >= -accessors.curcost(d)) {\n                  if (red) {\n                    redData.push(d);\n                    allRed.push(redData);\n                    redData = [];\n                    red = false;\n                  }\n                  green = true;\n                  greenData.push(d);\n                } else {\n                  if (green) {\n                    greenData.push(d);\n                    allGreen.push(greenData);\n                    greenData = [];\n                    green = false;\n                  }\n                  red = true;\n                  redData.push(d);\n                }\n                if (Object.is(data.length - 1, idx)) {\n                  if (green) {\n                    greenData.push(d);\n                    allGreen.push(greenData);\n                  } else {\n                    redData.push(d);\n                    allRed.push(redData);\n                  }\n                }\n              });\n\n              // add the area\n              allGreen.forEach(greenD => {\n                chart\n                  .append(\"path\")\n                  .data([greenD])\n                  .attr(\"class\", \"greenArea\")\n                  //.style(\"opacity\", .2)\n\n                  .attr(\"d\", area);\n              });\n              allRed.forEach(redA => {\n                chart\n                  .append(\"path\")\n                  .data([redA])\n                  .attr(\"class\", \"redArea\")\n                  .attr(\"d\", area);\n              });\n            }\n\n            /*   for debugging some NaNs in line, fix it for now\n               *   but leaving code in case it comes back\n              .attr(\"d\", d => {\n                let l = redLine(d)\n                if (l.match(/^M0,NaN/)) {\n                  let x = d.map(p => xScale(accessors.date(p)))\n                  let y = d.map(p => yScale(accessors.curcost(p)))\n                  console.log({x,y,l})\n                  debugger\n                }\n                return l\n              })\n              */\n          }\n          /*\n          blueLine: d3\n      .line()\n      .x(d => xScale(accessors.x(d)))\n      .y(d => yScale(accessors.y1(d)))\n        */\n        }\n      },\n      {\n        Comp: Chart,\n        fixedProps: {\n          xScale,\n          title: \"daily closing price\",\n          type: \"close\",\n          makeYScale: (height, data, accessors) =>\n            d3\n              .scaleLinear()\n              .range([height, 0])\n              .domain([0, d3.max(data.map(accessors.close))]),\n          doToChart: (chart, data, xScale, yScale) => {\n            var simpleLine = d3\n              .line()\n              .x(function(d) {\n                return xScale(accessors.date(d));\n              })\n              .y(function(d) {\n                return yScale(accessors.close(d));\n              });\n            chart\n              .append(\"path\")\n              .data([data])\n              .attr(\"class\", \"blue\")\n              .attr(\"d\", simpleLine);\n          }\n        }\n      }\n    ];\n    cgCharts.xScale = xScale;\n    return cgCharts;\n  }\n  tradeLines({ cgCharts }) {\n    let { cgHeight, yScale, xScale } = cgCharts;\n    let { sym, cgcData } = this.props;\n    let { cgcName, daily, accessors } = cgcData;\n    let data = sym.records;\n    let trades = data.filter(d => d.Action !== \"NA\");\n    return (\n      <g>\n        {trades.map((d, idx) => (\n          <g key={idx} transform={`translate(${xScale(d.date)}, 0)`}>\n            <line\n              x1={0}\n              x2={0}\n              y1={0}\n              y2={cgHeight}\n              className={`trade-line ${d.Action}`}\n            />\n          </g>\n        ))}\n      </g>\n    );\n  }\n  makeSvg() {\n    // per symbol processing\n    let { sym, cgcData } = this.props;\n    if (!sym) {\n      return;\n    }\n    let data = sym.records;\n    let { cgcName, daily, accessors, width } = cgcData;\n\n    let cgCharts = this.makeCgCharts();\n    let xScale = cgCharts.xScale;\n\n    let selectedDate = xScale.domain()[1];\n    let cgHeight = chartGroupConf().height; // height of chart group\n    let cHeight = cgHeight / cgCharts.length; // height of each chart in it\n    let key = `${cgcName}-${sym}`;\n    //console.log(\"making svg\", key);\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n    let height = cHeight - margin.top - margin.bottom;\n    width = width - margin.left - margin.right;\n    // need a way to hold on to height!!!\n    // ok, pretty kludgy, but here it is:\n    Object.assign(cgCharts, { cgHeight, cHeight, key, margin, height, width });\n\n    let charts = cgCharts.map((chart, idx) => {\n      let ckey = `${key}-${chart.fixedProps.type}`;\n      let yScale = chart.fixedProps.makeYScale(height, data, accessors);\n      chart.ckey = ckey;\n      chart.yScale = yScale;\n      return (\n        <g\n          key={ckey}\n          className=\"chart\"\n          transform={`translate(0, ${cHeight * idx})`}\n        >\n          <chart.Comp\n            {...chart.fixedProps}\n            sym={sym + \"\"}\n            data={data}\n            width={width}\n            height={height}\n            yScale={yScale}\n          />\n          <line\n            x1={0}\n            x2={width + margin.left + margin.right}\n            y1={yScale(0)}\n            y2={yScale(0)}\n            className=\"zero\"\n          />\n          <circle\n            id={`trade-dot-${ckey}`}\n            cx={-100}\n            cy={-100}\n            stroke=\"green\"\n            strokeWidth=\"3px\"\n            fillOpacity={0.5}\n            fill=\"white\"\n            r={8}\n          />\n          {/*this.blueLine({xScale, yScale, data, height, width, accessors})*/}\n        </g>\n      );\n    });\n    let svg = (\n      <svg\n        key={key}\n        width={width + margin.left + margin.right}\n        height={cgHeight}\n        //onMouseEnter={this.enterChart}\n        onMouseLeave={this.leaveChart}\n        onMouseMove={this.hoverChart}\n      >\n        {this.tradeLines({ cgCharts })}\n        {charts}\n      </svg>\n    );\n    this.setState({ svg, selectedDate, cgCharts });\n  }\n  render() {\n    let { cgcData } = this.props;\n    let { daily, accessors, width, height } = cgcData;\n    let { svg = null, hoverMsg, selectedDate } = this.state;\n    return (\n      <div className=\"chart-group\">\n        <div className=\"info-box\">{hoverMsg}</div>\n        {svg}\n      </div>\n    );\n  }\n}\n\nconst Legend = props => {};\n","module.exports = __webpack_public_path__ + \"static/media/daily.343f2f78.csv\";","module.exports = __webpack_public_path__ + \"static/media/dcadaily.884b3528.csv\";"],"sourceRoot":""}